From f9393010b354dae46b063f9d3e5569d67e5247b7 Mon Sep 17 00:00:00 2001
From: Nick Stakenburg <nickstakenburg@home.nl>
Date: Sat, 20 Sep 2008 03:33:05 +0200
Subject: [PATCH] Event#observe can now handle mouseenter mouseleave events.

---
 src/event.js |   51 +++++++++++++++++++++++++++++++++++++++++----------
 1 files changed, 41 insertions(+), 10 deletions(-)

diff --git a/src/event.js b/src/event.js
index 14f9aa4..03812e3 100644
--- a/src/event.js
+++ b/src/event.js
@@ -158,7 +158,44 @@ Object.extend(Event, (function() {
     if (eventName && eventName.include(':')) return "dataavailable";
     return eventName;
   }
-  
+
+  function createWrapperFunction(element, eventName, handler) {
+    return function(event) {
+      if (!Event || !Event.extend ||
+       (event.eventName && event.eventName != eventName))
+        return false;
+
+      handler.call(element, Event.extend(event));
+    };
+  }
+
+  if (!Prototype.Browser.IE) {
+    var events = { enter: 'over', leave: 'out' },
+     isEnterLeave = /^mouse(enter|leave)$/;
+
+    getDOMEventName = getDOMEventName.wrap(function(proceed, eventName) {
+      var EL = isEnterLeave.exec(eventName);
+      if (EL) eventName = 'mouse' + events[EL[1]];
+      return proceed(eventName);
+    });
+
+    createWrapperFunction = createWrapperFunction.wrap(function(proceed, element, eventName, handler) {
+      var wrapper = proceed(element, eventName, handler);
+      if (isEnterLeave.test(eventName)) {
+        wrapper = wrapper.wrap(function(proceed, event) {
+          var parent = event.relatedTarget;
+          while (parent && parent != element) {
+            try { parent = parent.parentNode; }
+            catch(e) { parent = element; }
+          }
+          if (parent == element) return;
+          proceed(event);
+        });
+      }
+      return wrapper;
+    });
+  }
+
   function getCacheForID(id) {
     return cache[id] = cache[id] || { };
   }
@@ -177,15 +214,9 @@ Object.extend(Event, (function() {
 
     var w = getWrappersForEventName(id, eventName);
     if (w.pluck("handler").include(handler)) return false;
-    
-    var wrapper = function(event) {
-      if (!Event || !Event.extend ||
-        (event.eventName && event.eventName != eventName))
-          return false;
-      
-      handler.call(element, Event.extend(event));
-    };
-    
+
+    var wrapper = createWrapperFunction(element, eventName, handler);
+
     wrapper.handler = handler;
     w.push(wrapper);
     return wrapper;
-- 
1.5.5.1015.g9d258

